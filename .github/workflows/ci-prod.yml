name: CI for MSIX Code Signing

on:
  push:
    branches:
      - fix/certificate-issue
  workflow_dispatch:

permissions:
  contents: write
  deployments: write

jobs:
  test:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Test using MSTest

    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.x'

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build

  deploy:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Create and sign MSIX package artifact
    needs: [test]
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]

    runs-on: windows-latest

    env:
      Solution_Name: MageWin.sln
      Certificate_Path: code_signing_cert.pfx
      Certificate_Password: 12345
      Company_Name: Mage
      Subject_CN: CN=Mage

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 6.0.x

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2.0.0

      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Create self-signed code signing certificate
        run: |
          $cert = New-SelfSignedCertificate -Subject $env:Subject_CN -FriendlyName $env:Company_Name -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -KeyUsage DigitalSignature -Type CodeSigningCert -CertStoreLocation "Cert:\LocalMachine\My" -NotAfter (Get-Date).AddYears(5) -HashAlgorithm 'SHA256'
          $store = New-Object System.Security.Cryptography.X509Certificates.X509Store("My", "LocalMachine")
          $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
          $store.Add($cert)
          $store.Close()
          $exportedCert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new($cert)
          [System.IO.File]::WriteAllBytes($env:Certificate_Path, $exportedCert.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pfx))
          Remove-Item -Path "Cert:\LocalMachine\My\$($cert.Thumbprint)"
        shell: pwsh
        env:
          Certificate_Path: ${{ env.Certificate_Path }}
          Company_Name: ${{ env.Company_Name }}
          Subject_CN: ${{ env.Subject_CN }}

      - name: Create the app package
        run: |
          msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=SideloadOnly /p:AppxBundle=Never /p:PackageCertificateKeyFile="$env:Certificate_Path" /p:AppxPackageDir="./AppPackages/" /p:GenerateAppxPackageOnBuild=true
        env:
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}

      - name: Check Certificate
        run: |
          Write-Host "Checking certificate..."
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          & $signtool verify /pa /v $env:Certificate_Path
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Certificate is valid."
          } else {
            Write-Host "Certificate is invalid. Please check the certificate."
            exit 1
          }
        shell: pwsh
        env:
          Certificate_Path: ${{ env.Certificate_Path }}

      - name: Sign MSIX packages
        run: |
          Write-Host "Starting package signing..."
          $signtool = "C:\Program Files (x86)\Microsoft SDKs\ClickOnce\SignTool\signtool.exe"
          Get-ChildItem -Path './AppPackages' -Recurse -Filter *.msix | ForEach-Object {
            Write-Host "Signing package: $($_.FullName)"
            & $signtool sign /f $env:Certificate_Path /tr http://timestamp.sectigo.com/?td=sha256 /td sha256 $_.FullName
          }
          Write-Host "Package signing completed."
        shell: pwsh
        env:
          Certificate_Path: ${{ env.Certificate_Path }}


      - name: Upload MSIX package
        uses: actions/upload-artifact@v4
        with:
          name: MSIX Package ${{ matrix.platform }}
          path: ./AppPackages/**/*.msix

  create-tag-and-release:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Create Tag and Release
    needs: [deploy]
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, x86]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all MSIX packages
        uses: actions/download-artifact@v4

      - name: Get Project version from Package.appxmanifest
        id: project-version-latest
        run: |
          [xml]$manifest = Get-Content -Path './Package.appxmanifest'
          $version = $manifest.Package.Identity.Version
          echo "::set-output name=current-version::$version"

      - name: Create a tag and release
        uses: softprops/action-gh-release@v1
        continue-on-error: true
        with:
          files: |
            ./**/*_${{ matrix.platform }}.msix
          tag_name: ${{ steps.project-version-latest.outputs.current-version }}
          name: v${{ steps.project-version-latest.outputs.current-version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
