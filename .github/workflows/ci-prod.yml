name: ci-prod.yml

on:
  push:
    branches:
      - fix/certificate-issue
  workflow_dispatch:

permissions:
  contents: write
  deployments: write

jobs:
  test:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Test using MSTest

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
  
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build

    # # Uncomment to enable testing
    # - name: Test with the dotnet CLI
    #   run: dotnet test

  deploy:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Create MSIX package artifact
    needs: [test]
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]

    runs-on: windows-latest

    env:
      Solution_Name: MageWin.sln

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2.0.0

    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    - name: Decode the pfx and save the Signing_Certificate
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.PFX_FILE }}")
        $certificatePath = Join-Path -Path $env:Appx_Package_Dir -ChildPath "mycert.pfx"
        [System.IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
      shell: pwsh
      env:
        Appx_Package_Dir: ./AppPackages/


    # - name: Decode and Import the PFX certificate
    #   run: |
    #     $pfxBase64 = "${{ secrets.PFX_FILE }}"
    #     # $pfxPassword = "${{ secrets.PFX_CERT_PASSWORD }}"
    #     $pfxPath = "GitHubActionsWorkflow.pfx"
    #     # $pfxPasswordSecure = ConvertTo-SecureString -String $pfxPassword -Force -AsPlainText
    #     [System.Convert]::FromBase64String($pfxBase64) | Set-Content $pfxPath -AsByteStream
    #     Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My
    #     # Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation Cert:\CurrentUser\My -Password $pfxPasswordSecure

    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:PackageCertificateKeyFile=mycert.pfx
      env:
        Appx_Bundle: Never
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: ./AppPackages/
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}

    # - name: Generate a self-signed certificate
    #   run: |
    #     $cert = New-SelfSignedCertificate -DnsName "Mage" -CertStoreLocation "cert:\LocalMachine\My"
    #     $pwd = ConvertTo-SecureString -String "${{ secrets.CERTIFICATEPASSWORD }}" -Force -AsPlainText
    #     Export-PfxCertificate -Cert $cert -FilePath "./Mage.pfx" -Password $pwd
    #     Export-Certificate -Cert $cert -FilePath "./Mage.crt"

    #     # # Convert the .pfx to a base64 string for GitHub Action
    #     # $pfxBytes = Get-Content -Path "./Mage.pfx" -AsByteStream
    #     # $base64Cert = [Convert]::ToBase64String($pfxBytes)

    #     # # Extract certificate SHA1 hash and name
    #     # $thumbprint = $cert.Thumbprint
    #     # $certName = $cert.Subject

    #     # # Set environment variables for use in subsequent steps
    #     # echo "CERTIFICATE=$base64Cert" | Out-File -Append -Encoding utf8 -FilePath $env:GITHUB_ENV
    #     # echo "CERTHASH=$thumbprint" | Out-File -Append -Encoding utf8 -FilePath $env:GITHUB_ENV
    #     # echo "CERTNAME=$certName" | Out-File -Append -Encoding utf8 -FilePath $env:GITHUB_ENV
    #   shell: pwsh

    # - name: Sign MSIX Package with PowerShell
    #   run: |
    #     $certPath = "./Mage.pfx"
    #     $certPassword = "${{ secrets.CERTIFICATEPASSWORD }}"
    #     $securePassword = ConvertTo-SecureString -String $certPassword -Force -AsPlainText
    #     $certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($certPath, $securePassword)
    #     Get-ChildItem -Path './AppPackages/${{ matrix.platform }}' -Recurse -Filter *.msix | ForEach-Object {
    #       Set-AuthenticodeSignature -FilePath $_.FullName -Certificate $certificate -TimestampServer 'http://timestamp.digicert.com'
    #     }
    #   shell: pwsh

    # - name: Verify MSIX Package Signatures
    #   run: |
    #     $filesToVerify = Get-ChildItem -Path './AppPackages/${{ matrix.platform }}' -Recurse -Filter *.msix
    #     foreach ($file in $filesToVerify) {
    #       $signature = Get-AuthenticodeSignature -FilePath $file.FullName
    #       if ($signature.Status -eq "Valid") {
    #         Write-Host "Signature is valid for file: $file"
    #       } else {
    #         Write-Host "Signature is NOT valid for file: $file"
    #         exit 1
    #       }
    #     }
    #   shell: pwsh


    # - name: Code Sign MSIX package
    #   uses: skymatic/code-sign-action@v2.0.1
    #   with:
    #     certificate: ${{ env.CERTIFICATE }}
    #     password: ${{ secrets.CERTIFICATEPASSWORD }}
    #     certificatesha1: ${{ env.CERTHASH }}
    #     certificatename: ${{ env.CERTNAME }}
    #     folder: './AppPackages/'
    #     recursive: true
    #     description: 'My App'
    #     timestampUrl: 'http://timestamp.digicert.com'

    # - name: Create the app package
    #   run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=$pfxPath /p:PackageCertificatePassword=$pfxPassword /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
    #   env:
    #     Appx_Bundle: Never
    #     Appx_Package_Build_Mode: SideloadOnly
    #     Appx_Package_Dir: ./AppPackages/
    #     Configuration: ${{ matrix.configuration }}
    #     Platform: ${{ matrix.platform }}
    
    # - name: Remove the PFX certificate
    #   run: Remove-Item -Path "GitHubActionsWorkflow.pfx"

    - name: Upload MSIX package
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package ${{ matrix.platform }}
        path: ./AppPackages/**/*.msix

  create-tag-and-release:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: Create Tag and Release
    needs: [deploy]
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, x86]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all tags and branches
                
      - name: Download all MSIX packages
        uses: actions/download-artifact@v4

      - name: Get Project version from Package.appxmanifest
        id: project-version-latest
        run: |
          [xml]$manifest = Get-Content -Path './Package.appxmanifest' # The path to the Package.appxmanifest file in the root directory
          $version = $manifest.Package.Identity.Version
          echo "::set-output name=current-version::$version"      

      - name: Create a tag and release
        uses: softprops/action-gh-release@v1
        continue-on-error: true
        with:
          files: |
            ./**/*_${{ matrix.platform }}.msix
          tag_name: ${{ steps.project-version-latest.outputs.current-version }}
          name: v${{ steps.project-version-latest.outputs.current-version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}